from modules.entity_readers.helpers import *

def read_PowerCable(f):
	'''
	Power_Cable (0x27 = 39) 01111101
	268 entities
	Node structure:
	- node_flags can be 00041000 (most frequent), 00041002 (#150 only: windmill_control_open_t_0), 00041020, 00041200 (#40 only: floodgate_control_arm_b), 00041400 (#67-73-83-153: hub_triple_{a,b,c} and common),
	  00049000, 00841000, 00841002 (#142 only: windmill_control_open_t_1), 00841020, 00a41000 (#81-110-203: hub_container_{red,blue,green}), 10841000, 40041000.
	- node_string is often provided as a comment to describe the cable.
	- node_group_id is very often provided.
	- node_ids can point to a Inanimate, Door, or Machine_Panel entity -> probably a pointer to the entity that the cable gives power to
	- the ids in node_ints can be ids of Door or, more rarely, Door and Machine_Panel entities
	- node_float is only provided twice: 10.0 for #123 (hub_bird), 40.0 for #132.
	- node_ints is provided most of the time, but is usually just ([], [0]). A few cables have a Door and [0]. #90-105 have (Door-284, [0,1]). Some other exceptions. Notably, the clev_nolight{1…6} have all:
	  (Door-237-248-254-258-273-277-281-286-294-298-302-306, [0, 2048, 3072, 3584, 3840, 3968, 4032, 4064, 4080, 4088, 4092, 4094, 4095]), where the ints are just 12-bit mask field where all the MSB are set.
	- node_final_floats always have specific values for the radius and the vector.
	'''
	return (
		read_byte(f),					#  0: Boolean. Set when the mesh for for the cable does not follow the usual cable mesh design:
										#     only set for the broken cable of the greenhouse elevator and the four small puzzles in the giant floor puzzle of the mountain (see next field).
		read_optional_string(f),		#  1: A mesh file. Only provided for non-standard cables:
										#     loc_swamp_hangingWire_0{1,3…5}, obj_panels_Coil_{Left,Right}_D (rotating bridge), obj_panels_End_bottomFloor_Cable{A…D} (small puzzles in the big one),
										#     and obj_panels_cableEnd (clev_nolight4: broken cable in the greenhouse elevator).
										#     I guess that when the mesh name is not provided, a mesh is generated by the editor as a save_{entity_id}.mesh file.
										#     -> Actually no, because none of the mesh files listed above actually exists.
										#	     Since the string do not appear in the corresponding mesh files neither, I guess it's more a comment or identifier or script name.
		read_vector32(f),				#  2: Always (1.0, 0.0, 0.0), except for #36 (one of the two for the moving platforms near the dock of the marsh) and #110 (hub_container_blue),
										#     for which it is (1.0, 1.0, 1.0).
										#     -> First component is always 1.0, second and third components are always equal and either 0.0=off or 1.0=on
										#     -> Initial state of the cable: on or off (as for the Light entities).
		read_array(f, 3, read_id),		#  3: What the cable is powering. It can be ids of a Gauge, a Machine_Panel or Multipanel, a Door, a Light, another Power_Cable, a Laser...
		
		read_int(f),					#  4: Most often 0, but can also be 1 or 2.

										# The three following lists have always the same size, and can have from 2 to 65 items. It seems to be the control points to define the shape of the cable.
		read_list(f, read_vector32),	#  5: Positions. Seems to be always in the bounding box defined by node_final_floats.
		read_list(f, read_float32),		#  6: Radii of curvature? No. Maybe the cable tension? -> seems to be the cable torsion, actually... angle in radian relatively to the vertical? or to the natural torsion of the curve?
		read_list(f, read_float32),		#  7: Always between 0.0 and 1.0, most often 0.0. -> not the torsion, not the width of cable. Maybe the angularity of the control point (0 is smooth, 1 is angular)?
		
		read_array(f, 7, read_float32),	#  8: Two vectors giving the bounding box of the cable mesh vertexes, and one of these strange floats that often takes integer values, here between 0.013 and 40.0.
										#     The two vectors actually seem to be the positions of the handles (Bézier-curve style) to define the direction of the cable at its extremities (basically, it's as
										#     if it was respectively the first position before the others in field 7 and the last position after the others.)
		
		read_int(f),					#  9: Unclear. Seems to be a bitmask? Or some texture width?
		read_optional_string(f),		# 10: A texture file. Almost always obj_panels_cables_01. Sometimes not provided. But can also be:
										#     obj_panels_cables_Secret{-dark} (secret cable of the mountain yellow box), obj_panels_cables_camo (leaving the stone pillar panel in the entry yard), and
										#     obj_panels_cables_sym (double cyan-yellow cables).
										#     -> seems to be the name of the texture that appears as the first parameter of the unique material in the generated mesh file.
		read_optional_string(f),		# 11: Usually not provided. But can be "cable" for the cables in symmetry island,
										#     or "power_cables_01" for the cables of the control panels of the three moving panels (sliding or rotating) in the desert ruins.
										#     -> seems to become the name of the unique material in the generated mesh file.
		read_array(f, 4, read_float32),	# 12: All positive. In the range (0.015, 0.4, 0.5, 0.15) to (0.05, 1.0, 1.15, 0.25).
										#     4th is always 0.25, except for the wires of the marsh rotating bridge #95 (bridge_control_cw) and #98 (bridge_control_ccw), for which it is 0.15.
		read_byte(f),					# 13: Boolean. Always set, except for seven cables.
		read_array(f, 9, read_float32),	# 14: (1.0, 0.0, 0.0, 0.0, 0.214, 0.0, 0.0, 0.0, 1.0) to (1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0) -> first and last are always 1.0.
										#     -> Last four are definitely the RGBA color of the cable when lit. But these values do not appear in the corresponding mesh file, so they are probably
										#        provided to the shader directly by the engine from this entity data.
										#     -> The four previous ones are also a RGBA color, usually the same than the cable, but sometimes black or white
										#        (for the shadow forest cables, it's even yellow against light green!)
		read_optional_string(f),		# 15: The name of a sound file to play when the cable is powered on (sound files can have a 1 or 2 added to their name).
		read_optional_string(f),		# 16: Idem but when the power goes down.
		read_byte(f),					# 17: Boolean. Only set for the three cables of the colored lights in the hub container, the last cable in the pine section of the shadow forest,
										#     and the last three cables in the dead trees section of the shadow forest.
		read_optional_string(f),		# 18: The name of a sound file to play in loop while the cable is powered. Often provided but not always.
		read_optional_string(f),		# 19: A texture mask to know what parts of the cable should be lit or not. Almost always "obj_panels_cables_01_mask", but sometime not provided, and can also be:
										#     obj_panels_cables_Secret_ON (second cable of the yellow box of the mountain), obj_panels_cables_sym_ON (bicolor cables on symmetry island)
										#     and violet for #154 (in the marsh, red underwater room - the texture is like the things floating on the surface of water).
		read_int(f),					# 20: Usually, 0, but is also 1,2,3 for the cables powering the three lights in the -1 floor of the desert ruins (from left to right when you solve the panel),
										#     240133 for #197-237 (some cables in the Keep near the tower, respectively on the platform and hedge maze sides, opening Doors 269 and 265. #197 has field 13 set but not #237),
										#     and 240139 for a cable opening one of the entrance doors of the monastery (Door-183).
	)
